import numpy as np

# function to get matrix input 
def get_matrix():
    try:
        rows=int(input("Enter the number of rows : "))
        cols=int(input("Enter the number of columns : "))
        print("Enter the elements of the matrix (seperated by comma) :")
        elements=[]
        for _ in range(rows):
            row=list(map(int,input().split(',')))
            if len(row) != cols:
                   raise ValueError("Number of columns doesnot match ")
            elements.append(row)
        return np.array(elements)
    except ValueError as ve:
         print("Error :",ve)
         return None


#  function to calculate the matrices 
def matrix_operations(A,B):
    print("\nMatrix A:\n",A)
    print("\nMatrix B:\n",B)
    
# addition 

    try:
        print("\n Addition of the matrices :\n",A+B)
    except ValueError:
         print("Error : Matrices must have the same dimensions for addition")


# subtraction
    try:
         print("\nSubtraction of the matrices:\n",A-B)
    except ValueError:
         print("Error : Matrices must have the same dimensions for subtraction ")


#Element wise  multiplication using 
    try:
         print("\n Element wise Multiplication of the matrices:\n",A*B)
    except ValueError:
         print("Error : Number of columns in A must be equal to number of rows in B for multiplication ")
    

# Multiplication using the Dot function  
    try:
         print("\n Multiplication of the matrices using dot function :\n",np.dot(A,B))

    except ValueError:     
            print("Error : Number of columns in A must be equal to number of rows in B for multiplication ")        


# Transpose the matrices 
    print("\nTranspose of matrix :\n",A.T)
    print("\nTranspose of the matrix B :\n",B.T)


# determinantof the matrices
    try:
         print("\nDeterminant of matrix A :\n",np.linalg.det(A))    
    except np.linalg.LinAlgError:
         print("Error : Matrix A must be square to compute determinant ")   

    try:
         print("\nDeterminant of matrix B :\n",np.linalg.det(B))
    except np.linalg.LinAlgError:
         print("Error : Matrix B must be square to compute determinant ")


# inverse of the matrices
    try:
         print("\nInverse of matrix A :\n",np.linalg.inv(A))

    except np.linalg.LinAlgError:
         print( "Error: the matrix A is not invertible")

    try:
         print("\nInverse of matrix B :\n",np.linalg.inv(B))

    except np.linalg.LinAlgError:
         print( "Error: the matrix B is not invertible")


# main function
def main():
    print("----Matrix Calculator----")
    print("input the matrix :A")
    A=get_matrix()
    if A is None:
         return
    
    print("\nInput the Matix B:")
    B=get_matrix()
    if B is None:
        return
    
    matrix_operations(A,B)

if __name__=="__main__":
     main()
    
